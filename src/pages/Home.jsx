import React, {useState, useEffect} from 'react'
import {Loader, FormField, Cart} from '../components'
import axios from 'axios'
import './style.css'
import Footer from '../components/Footer'
import { imageUrls } from '../App'
import { Backend_Api_Endpoint } from '../App'

const RenderCards = ({data, title}) =>{
    if(data?.length > 0){
        return(
        data.map((post) => <Cart key={post._id} {...post} />)
        );
    }

    return (
        <h2 className='mt-5  font-bold text-[#6469ff] text-xl uppercase  md:text-[18px] sm:text-[14px] xs:text-[12px] text-[12px]'>{title}</h2>
    )
}


const Home = () => {
    const [loading, setLoading] = useState(true)
    const [allPosts, setAllPosts] = useState(null)


    const [searchText, setSearchText] = useState()
    const [searchTimeout, setSearchTimeout] = useState(null)
    const [searchedResults, setSearchedResults] = useState(null);


    //bg-image
    const [bgImageUrl, setBgImageUrl] = useState(imageUrls[0]);


    useEffect(() =>{
        var a = 0;
        const interval = setInterval(() => {
            a++;
            if(a+1 < imageUrls.length){
              setBgImageUrl(imageUrls[a])
    
            }else{
    
              a = 0;
            }
    
        }, 12000);
        return () =>{

            clearInterval(interval);
        }
      }, [imageUrls])



    useEffect(() =>{
        const fetchPosts = async() =>{
            setLoading(true)

            try {
                const response = await axios.get(`${Backend_Api_Endpoint}/api/v1/post`)
                if(response?.data?.success){

                    setAllPosts(response?.data?.data);

                }
                
            } catch (error) {
                alert(error);
            }finally{
                setLoading(false)
            }
        }
        fetchPosts();
    }, [])

  const handleSearchChange = (e) =>{

    clearTimeout(searchTimeout)
    setSearchText(e.target.value);

    setSearchTimeout(
    setTimeout(() => {
        if(!allPosts || allPosts !== undefined || allPosts.length !== 0){

            const searchResults = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || 
            item.prompt.toLowerCase().includes(searchText.toLowerCase()));
            setSearchedResults(searchResults);
        }

    }, 500)
    );
  }

  return (
    <div >
    <div className=" imense relative h-[400px] bg-cover bg-center bg-no-repeat " style={{backgroundImage: `url(${bgImageUrl})`, transition: '3s ease-in'}}>
        <div className="h-full w-full flex justify-center flex-col items-center absolute">
        <h1 className=' font-extrabold lg:text-[66px] text-gradient  md:text-[50px] text-[30px] leading-tight my-3  px-5'>
                The community Showcase
                </h1>
                <div className="css-typing text-white xs:text-xs px-5">
                    <p > Browse through a collection of imaginative and </p>
                    <p>visually stunning images
                    generated by DALL-E AI</p>
                </div>
        </div>
        </div>
    <section className='min-h-[268px] px-5' >
        <div className="max-w-7xl mx-auto ">

            <div className="mt-16">

            <FormField LablelName="Search Posts"
            type="text"
            name ="text"
            placeholder="search posts"
            value ={searchText}
            handleChange={handleSearchChange}/>
            </div>

            <div className="mt-10 flex flex-col justify-center items-center min-w-[100px]">

           
                {loading ? (
                    <div className="flex justify-center items-center">
                        <Loader/>
                    </div>
                ): (
                    <>
                    {searchText && (<h2 className='flex justify-center font-medium text-[#666e75] text-xl lg:text-[24px] md:text-[18px] sm:text-[14px] xs:text-[12px] text-[12px] mb-3'>
                        Showing results for:-  <span className='text-[#b6b3b3] text-xl lg:text-[24px] md:text-[18px] sm:text-[14px] xs:text-[12px] text-[12px]'>{searchText}</span>
                    </h2>)}
                    </>
                )}


                    <div className=" grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-3 gap-2 pb-10"> 

                    {searchText ? (
                        <RenderCards data ={searchedResults} 
                        title = "No search results found"/>

                    ): (

                              <RenderCards 
                            data={allPosts}
                            title="No posts found"
                        />
                      
                    )}

                </div>
                   
               
            </div>

        </div>
       
    </section>
    <Footer searchText = {searchText}/>


    
    </div>
  )
}

export default Home